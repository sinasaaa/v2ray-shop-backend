// ===== FINAL & COMPLETE PRISMA SCHEMA =====

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt   @id // Telegram User ID
  firstName String
  lastName  String?
  username  String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user (if they are an admin) can have one panel setting
  panel       Panel?
  enrollments Enrollment[]
  courses     Course[]
}

model Panel {
  id        Int      @id @default(autoincrement())
  url       String
  username  String
  password  String   // Should be encrypted in a real high-security app

  // Relation to the admin user
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt   @unique // Each admin has only one panel setting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is the full model for "Course", not a comment
model Course {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  price       Float
  isActive    Boolean  @default(true)
  duration    Int      // Duration in days
  dataLimit   BigInt   // Data limit in bytes

  instructor  User     @relation(fields: [instructorId], references: [id])
  instructorId BigInt

  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is the full model for "Enrollment"
model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

// This is the full enum definition
enum UserRole {
  STUDENT
  ADMIN
  INSTRUCTOR // Added back the INSTRUCTOR role
}
